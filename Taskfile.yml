version: 3
vars:
  KIND_CLUSTER_NAME: kms-vault
  GOSEC_VERSION: 2.11.0
  GOLANGCI_VERSION: 1.46.2
  KIND_VERSION: 0.11.1
  KUBERNETES_VERSION: 1.21.2
  HELM_VERSION: 3.6.3
  VAULT_VERSION: 1.8.1
  KUBECTL_VERSION: 1.21.1
  KUTTL_VERSION: 0.12.1
  HUSKY_VERSION: 0.2.8
  BASE_IMAGE:
    sh: '([ -z "$BASE_IMAGE" ] && head -1  Dockerfile | cut -d= -f2) || echo $BASE_IMAGE'
  ENABLED_PROVIDERS:
    sh: '([ -z "$ENABLED_PROVIDERS" ] && echo --enabled-providers debug) || echo $ENABLED_PROVIDERS'
  SCRIPT: scripts/hcvault/archives/testing
silent: true
tasks:
  default:
    cmds:
      - task -l
  bin-dir:init:
    desc: create bin directory
    cmds:
      - mkdir -p ./bin
      - mkdir -m 777 bin/run
      - mkdir -m 777 bin/run/debug
      - mkdir -m 777 bin/run/vault
      - mkdir -m 777 bin/run/awskms
      - mkdir -p tests/e2e/generated_manifests
    status:
      - test -d ./bin
      - test -d ./bin/run
      - test -d ./bin/run/debug
      - test -d ./bin/run/vault
      - test -d ./bin/run/awskms
      - test -d tests/e2e/generated_manifests
  fetch:golangci:
    deps:
      - bin-dir:init
    desc: install golanci
    cmds:
      - curl -L https://github.com/golangci/golangci-lint/releases/download/v{{.GOLANGCI_VERSION}}/golangci-lint-{{.GOLANGCI_VERSION}}-{{OS}}-{{ARCH}}.tar.gz | tar xvz --one-top-level=golangcitmp
      - mv golangcitmp/golangci-lint-{{.GOLANGCI_VERSION}}-{{OS}}-{{ARCH}}/golangci-lint ./bin/golangci-lint
      - chmod 755 bin/golangci-lint
      - rm -rf golangcitmp
    status:
      - test -f ./bin/golangci-lint
  fetch:gosec:
    deps:
      - bin-dir:init
    desc: install gosec
    cmds:
      - curl -L https://github.com/securego/gosec/releases/download/v{{.GOSEC_VERSION}}/gosec_{{.GOSEC_VERSION}}_{{OS}}_{{ARCH}}.tar.gz | tar xvz --one-top-level=gosectmp
      - mv gosectmp/gosec ./bin/gosec
      - chmod 755 bin/gosec
      - rm -rf gosectmp
    status:
      - test -f ./bin/gosec
  fetch:kind:
    deps:
      - bin-dir:init
    desc: install kind
    cmds:
      - curl -L https://github.com/kubernetes-sigs/kind/releases/download/v{{.KIND_VERSION}}/kind-{{OS}}-{{ARCH}} --output ./bin/kind && chmod +x ./bin/kind
    status:
      - test -f ./bin/kind
  fetch:helm:
    deps:
      - bin-dir:init
    desc: install helm
    cmds:
      - curl -L https://get.helm.sh/helm-v{{.HELM_VERSION}}-{{OS}}-{{ARCH}}.tar.gz | tar xvz -C ./
      - mv {{OS}}-{{ARCH}}/helm ./bin/helm
      - chmod 755 bin/helm
      - rm -rf {{OS}}-{{ARCH}}
    status:
      - test -f ./bin/helm
  fetch:vault:
    desc: install vault
    cmds:
      - curl "https://releases.hashicorp.com/vault/{{.VAULT_VERSION}}/vault_{{.VAULT_VERSION}}_{{OS}}_{{ARCH}}.zip" -o "vault.zip"
      - unzip vault.zip
      - mv vault bin/vault
      - chmod 755 bin/vault
      - rm vault.zip
    status:
      - test -f bin/vault
  fetch:kubectl:
    deps:
      - bin-dir:init
    desc: install kubectl
    cmds:
      - curl -Lo ./bin/kubectl  https://storage.googleapis.com/kubernetes-release/release/v{{.KUBECTL_VERSION}}/bin/{{OS}}/{{ARCH}}/kubectl
      - chmod +x ./bin/kubectl
    status:
      - test -f ./bin/kubectl
  fetch:kuttl:
    deps:
      - bin-dir:init
    desc: install kuttl
    cmds:
      - cd bin ; curl -L https://github.com/kudobuilder/kuttl/releases/download/v{{.KUTTL_VERSION}}/kuttl_{{.KUTTL_VERSION}}_{{OS}}_x86_64.tar.gz | tar -xz kubectl-kuttl
    status:
      - test -f ./bin/kuttl
  fetch:husky:
    deps:
      - bin-dir:init
    desc: install husky
    cmds:
      - cd bin ; curl -L https://github.com/automation-co/husky/releases/download/v{{.HUSKY_VERSION}}/husky_{{.HUSKY_VERSION}}_{{.CAP_ARCH}}_x86_64.tar.gz | tar -xz husky
      - chmod +x ./bin/husky
      - ./bin/husky install
    vars:
      CAP_ARCH:
        sh: uname
    status:
      - test -f ./bin/husky
  fetch:all:
    desc: fetch all tools
    cmds:
      - task: fetch:kubectl
      - task: fetch:kind
      - task: fetch:kuttl
  cluster:create:
    deps:
      - task: generate:manifests
    desc: create kind cluster
    cmds:
      - ./bin/kind create cluster --retain --image kindest/node:"v{{.KUBERNETES_VERSION}}" --name "{{.KIND_CLUSTER_NAME}}" --wait 2m --config ./{{.SCRIPT}}/kind-cluster.yaml
  cluster:delete:
    desc: destroy kind cluster
    cmds:
      - ./bin/kind delete cluster --name "{{.KIND_CLUSTER_NAME}}"
  vault:deploy:
    desc: install vault on cluster
    cmds:
      - ./bin/helm repo add banzaicloud-stable https://kubernetes-charts.banzaicloud.com
      - ./bin/helm upgrade --install vault-operator banzaicloud-stable/vault-operator --wait
      - ./bin/kubectl apply -f {{.SCRIPT}}/vault.yaml
  vault:port-forward:
    desc: port forwarding for vault
    cmds:
      - ./bin/kubectl port-forward svc/vault 8200:8200
  prometheus:deploy:
    deps:
      - task: fetch:helm
      - task: fetch:kubectl
    desc: install prometheus and grafana on cluster
    cmds:
      - ./bin/helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      - ./bin/helm upgrade --install prometheus prometheus-community/kube-prometheus-stack --wait
      - ./bin/kubectl apply -f {{.SCRIPT}}/prometheus.yaml --wait
      - ./bin/kubectl apply -f {{.SCRIPT}}/grafana-dashboard.yaml --wait
  prometheus:port-forward:
    deps:
      - task: fetch:kubectl
    desc: port forwarding for prometheus
    cmds:
      - ./bin/kubectl port-forward svc/prometheus-kube-prometheus-prometheus 9090
  grafana:port-forward:
    deps:
      - task: fetch:kubectl
    desc: open grafana (admin/prom-operator)
    cmds:
      - ./bin/kubectl port-forward svc/prometheus-grafana 8300:80
  generate:manifests:
    desc: generate manifests
    deps:
      - bin-dir:init
    cmds:
      - envsubst < {{.SCRIPT}}/kms.yaml > tests/e2e/generated_manifests/kms.yaml
      - chmod 644 tests/e2e/generated_manifests/*
  docker:build:
    desc: build docker image
    cmds:
      - task: docker:build:proxy
      - task: docker:build:debug
      - task: docker:build:vault
      - task: docker:build:awskms
      - task: docker:build:trousseau
  docker:build:proxy:
    cmds:
      - docker build --build-arg BASE_IMAGE={{.BASE_IMAGE}} --build-arg PROJECT=proxy -t $DOCKER_REGISTRY/$IMAGE_NAME:proxy-$IMAGE_VERSION .
  docker:build:debug:
    cmds:
      - docker build --build-arg BASE_IMAGE={{.BASE_IMAGE}} --build-arg PROJECT=providers/debug -t $DOCKER_REGISTRY/$IMAGE_NAME:debug-$IMAGE_VERSION .
  docker:build:vault:
    cmds:
      - docker build --build-arg BASE_IMAGE={{.BASE_IMAGE}} --build-arg PROJECT=providers/vault -t $DOCKER_REGISTRY/$IMAGE_NAME:vault-$IMAGE_VERSION .
  docker:build:awskms:
    cmds:
      - docker build --build-arg BASE_IMAGE={{.BASE_IMAGE}} --build-arg PROJECT=providers/awskms -t $DOCKER_REGISTRY/$IMAGE_NAME:awskms-$IMAGE_VERSION .
  docker:build:trousseau:
    cmds:
      - docker build --build-arg BASE_IMAGE={{.BASE_IMAGE}} --build-arg PROJECT=trousseau -t $DOCKER_REGISTRY/$IMAGE_NAME:trousseau-$IMAGE_VERSION .
  docker:push:
    desc: push docker image
    cmds:
      - task: docker:push:proxy
      - task: docker:push:debug
      - task: docker:push:vault
      - task: docker:push:awskms
      - task: docker:push:trousseau
  docker:push:proxy:
    cmds:
      - docker push $DOCKER_REGISTRY/$IMAGE_NAME:proxy-$IMAGE_VERSION
  docker:push:debug:
    cmds:
      - docker push $DOCKER_REGISTRY/$IMAGE_NAME:debug-$IMAGE_VERSION
  docker:push:vault:
    cmds:
      - docker push $DOCKER_REGISTRY/$IMAGE_NAME:vault-$IMAGE_VERSION
  docker:push:awskms:
    cmds:
      - docker push $DOCKER_REGISTRY/$IMAGE_NAME:awskms-$IMAGE_VERSION
  docker:push:trousseau:
    cmds:
      - docker push $DOCKER_REGISTRY/$IMAGE_NAME:trousseau-$IMAGE_VERSION
  docker:run:
    desc: run docker image
    cmds:
      - task: docker:run:proxy
      - task: docker:run:debug
      - task: docker:run:vault
      - task: docker:run:awskms
      - task: docker:run:trousseau
  docker:run:proxy:
    deps:
      - bin-dir:init
    cmds:
      - rm -rf bin/run/proxy.socket
      - docker rm -f trousseau-proxy || true
      - docker run -d --name trousseau-proxy --rm -v $PWD/bin/run:/opt/vault-kms $DOCKER_REGISTRY/$IMAGE_NAME:proxy-$IMAGE_VERSION
  docker:run:debug:
    deps:
      - bin-dir:init
    cmds:
      - rm -rf bin/run/debug/debug.socket
      - docker rm -f trousseau-debug || true
      - docker run -d --name trousseau-debug --rm -v $PWD/bin/run:/opt/vault-kms $DOCKER_REGISTRY/$IMAGE_NAME:debug-$IMAGE_VERSION
  docker:run:vault:
    deps:
      - bin-dir:init
    cmds:
      - rm -rf bin/run/vault/vault.socket
      - docker rm -f trousseau-local-vault || true
      - docker run -d --name=trousseau-local-vault --cap-add=IPC_LOCK -e 'VAULT_DEV_ROOT_TOKEN_ID=vault-kms-demo' vault
      - sleep 5
      - docker exec -e VAULT_ADDR=http://127.0.0.1:8200 trousseau-local-vault vault login vault-kms-demo
      - docker exec -e VAULT_ADDR=http://127.0.0.1:8200 trousseau-local-vault vault secrets enable transit
      - docker rm -f trousseau-vault || true
      - docker run -d --name trousseau-vault --rm --network=container:trousseau-local-vault -v $PWD/tests/e2e/kuttl/kube-v1.23/vault.yaml:/opt/vault-kms/vault/config.yaml -v $PWD/bin/run:/opt/vault-kms $DOCKER_REGISTRY/$IMAGE_NAME:vault-$IMAGE_VERSION -v=5
  docker:run:awskms:
    deps:
      - bin-dir:init
    cmds:
      - rm -rf bin/run/awskms/awskms.socket
      - docker rm -f trousseau-local-aws || true
      - docker run --name trousseau-local-aws --rm --hostname localhost.localstack.cloud -d -e SERVICES=kms -e HOSTNAME=localhost.localstack.cloud -e HOSTNAME_EXTERNAL=localhost.localstack.cloud -e DEFAULT_REGION=eu-west-1 -e KMS_PROVIDER=kms-local -p 4566:4566 -p 4510-4559:4510-4559 localstack/localstack:0.14.4
      - sleep 5
      - 'printf %"s\n" "endpoint: https://localhost.localstack.cloud:4566" "profile: trousseau-local-aws" "keyArn: $(docker exec trousseau-local-aws awslocal kms create-key | grep Arn | cut -d''"'' -f4)" > scripts/hcvault/archives/localdev/awskms.yaml'
      - docker rm -f trousseau-awskms || true
      - docker run -d --name trousseau-awskms --rm --network=container:trousseau-local-aws -v $PWD/scripts/hcvault/archives/localdev/aws-credentials.ini:/.aws/credentials -v $PWD/scripts/hcvault/archives/localdev/awskms.yaml:/opt/vault-kms/awskms/config.yaml -v $PWD/bin/run:/opt/vault-kms $DOCKER_REGISTRY/$IMAGE_NAME:awskms-$IMAGE_VERSION -v=5
  docker:run:trousseau:
    deps:
      - bin-dir:init
    cmds:
      - rm -rf bin/run/trousseau.socket
      - docker rm -f trousseau-core || true
      - docker run -d --name trousseau-core --rm -v $PWD/bin/run:/opt/vault-kms $DOCKER_REGISTRY/$IMAGE_NAME:trousseau-$IMAGE_VERSION {{.ENABLED_PROVIDERS}} -v=5
  go:tidy:
    desc: go tidy
    cmds:
      - task: go:tidy:proxy
      - task: go:tidy:debug
      - task: go:tidy:vault
      - task: go:tidy:awskms
      - task: go:tidy:trousseau
  go:tidy:proxy:
    dir: proxy
    cmds:
      - go mod tidy
  go:tidy:debug:
    dir: providers/debug
    cmds:
      - go mod tidy
  go:tidy:vault:
    dir: providers/vault
    cmds:
      - go mod tidy
  go:tidy:awskms:
    dir: providers/awskms
    cmds:
      - go mod tidy
  go:tidy:trousseau:
    dir: trousseau
    cmds:
      - go mod tidy
  go:fmt:
    desc: go fmt
    cmds:
      - task: go:fmt:proxy
      - task: go:fmt:debug
      - task: go:fmt:vault
      - task: go:fmt:awskms
      - task: go:fmt:trousseau
  go:fmt:proxy:
    dir: proxy
    cmds:
      - go fmt ./...
  go:fmt:debug:
    dir: providers/debug
    cmds:
      - go fmt ./...
  go:fmt:vault:
    dir: providers/vault
    cmds:
      - go fmt ./...
  go:fmt:awskms:
    dir: providers/awskms
    cmds:
      - go fmt ./...
  go:fmt:trousseau:
    dir: trousseau
    cmds:
      - go fmt ./...
  go:vet:
    desc: go vet
    cmds:
      - task: go:vet:proxy
      - task: go:vet:debug
      - task: go:vet:vault
      - task: go:vet:awskms
      - task: go:vet:trousseau
  go:vet:proxy:
    dir: proxy
    cmds:
      - go vet ./...
  go:vet:debug:
    dir: providers/debug
    cmds:
      - go vet ./...
  go:vet:vault:
    dir: providers/vault
    cmds:
      - go vet ./...
  go:vet:awskms:
    dir: providers/awskms
    cmds:
      - go vet ./...
  go:vet:trousseau:
    dir: trousseau
    cmds:
      - go vet ./...
  go:gosec:
    desc: go gosec
    cmds:
      - task: go:gosec:proxy
      - task: go:gosec:debug
      - task: go:gosec:vault
      - task: go:gosec:awskms
      - task: go:gosec:trousseau
  go:gosec:proxy:
    dir: proxy
    cmds:
      - gosec ./...
  go:gosec:debug:
    dir: providers/debug
    cmds:
      - gosec ./...
  go:gosec:vault:
    dir: providers/vault
    cmds:
      - gosec ./...
  go:gosec:awskms:
    dir: providers/awskms
    cmds:
      - gosec ./...
  go:gosec:trousseau:
    dir: trousseau
    cmds:
      - gosec ./...
  go:golangci:
    desc: golangci
    cmds:
      - task: go:golangci:proxy
      - task: go:golangci:debug
      - task: go:golangci:vault
      - task: go:golangci:awskms
      - task: go:golangci:trousseau
  go:golangci:proxy:
    dir: proxy
    cmds:
      - golangci-lint run -c ../.golangci.yaml
  go:golangci:debug:
    dir: providers/debug
    cmds:
      - golangci-lint run -c ../../.golangci.yaml
  go:golangci:vault:
    dir: providers/vault
    cmds:
      - golangci-lint run -c ../../.golangci.yaml
  go:golangci:awskms:
    dir: providers/awskms
    cmds:
      - golangci-lint run -c ../../.golangci.yaml
  go:golangci:trousseau:
    dir: trousseau
    cmds:
      - golangci-lint run -c ../.golangci.yaml
  go:unit-tests:
    desc: go unit test
    cmds:
      - task: go:unit-tests:proxy
      - task: go:unit-tests:debug
      - task: go:unit-tests:vault
      - task: go:unit-tests:awskms
      - task: go:unit-tests:trousseau
  go:unit-tests:proxy:
    dir: proxy
    cmds:
      - go test -coverprofile cover.out -race -timeout 30s ./...
  go:unit-tests:debug:
    dir: providers/debug
    cmds:
      - go test -coverprofile cover.out -race -timeout 30s ./...
  go:unit-tests:vault:
    dir: providers/vault
    cmds:
      - go test -coverprofile cover.out -race -timeout 30s ./...
  go:unit-tests:awskms:
    dir: providers/awskms
    cmds:
      - go test -coverprofile cover.out -race -timeout 30s ./...
  go:unit-tests:trousseau:
    dir: trousseau
    cmds:
      - go test -coverprofile cover.out -race -timeout 30s ./...
  go:run:
    desc: go run
    cmds:
      - task: go:run:proxy
      - task: go:run:debug
      - task: go:run:vault
      - task: go:run:awskms
      - task: go:run:trousseau
  go:run:proxy:
    dir: proxy
    deps:
      - bin-dir:init
      - go:tidy:proxy
    cmds:
      - rm -rf ../bin/run/proxy.socket
      - go run main.go --listen-addr unix://../bin/run/proxy.socket --trousseau-addr ../bin/run/trousseau.socket
  go:run:debug:
    dir: providers/debug
    deps:
      - bin-dir:init
      - go:tidy:debug
    cmds:
      - rm -rf ../../bin/run/debug/debug.socket
      - go run main.go --listen-addr unix://../../bin/run/debug/debug.socket
  go:run:vault:
    dir: providers/vault
    deps:
      - bin-dir:init
      - go:tidy:vault
    cmds:
      - rm -rf ../../bin/run/vault/vault.socket
      - go run -ldflags '-X github.com/ondat/trousseau/pkg/utils.SecretLogDivider=1' main.go --config-file-path ../../scripts/hcvault/archives/localdev/vault.yaml --listen-addr unix://../../bin/run/vault/vault.socket --zap-encoder=console --v=5
  go:run:awskms:
    dir: providers/awskms
    deps:
      - bin-dir:init
      - go:tidy:awskms
    cmds:
      - rm -rf ../../bin/run/awskms/awskms.socket
      - go run -ldflags '-X github.com/ondat/trousseau/pkg/utils.SecretLogDivider=1' main.go --config-file-path ../../scripts/hcvault/archives/localdev/awskms.yaml --listen-addr unix://../../bin/run/awskms/awskms.socket --zap-encoder=console --v=5
  go:run:trousseau:
    dir: trousseau
    deps:
      - bin-dir:init
      - go:tidy:trousseau
    cmds:
      - rm -rf ../bin/run/trousseau.socket
      - go run -ldflags '-X github.com/ondat/trousseau/pkg/utils.SecretLogDivider=1' main.go {{.ENABLED_PROVIDERS}} --socket-location ../bin/run --listen-addr unix://../bin/run/trousseau.socket --zap-encoder=console --v=5
  go:e2e-tests:
    desc: e2e tests
    cmds:
      - task: go:e2e-tests:vault
      - task: go:e2e-tests:awskms
      - task: go:e2e-tests:debug
  go:e2e-tests:vault:
    cmds:
      - task: docker:build:proxy
      - task: docker:build:vault
      - task: docker:build:trousseau
      - task: docker:run:proxy
      - task: docker:run:vault
      - ENABLED_PROVIDERS="--enabled-providers vault" task docker:run:trousseau
      - ./bin/kubectl-kuttl test --config tests/e2e/kuttl/kube-v1.23/kuttl.yaml
  go:e2e-tests:awskms:
    cmds:
      - task: docker:build:proxy
      - task: docker:build:awskms
      - task: docker:build:trousseau
      - task: docker:run:proxy
      - task: docker:run:awskms
      - ENABLED_PROVIDERS="--enabled-providers awskms" task docker:run:trousseau
      - ./bin/kubectl-kuttl test --config tests/e2e/kuttl/kube-v1.23/kuttl.yaml
  go:e2e-tests:debug:
    cmds:
      - task: docker:build:proxy
      - task: docker:build:debug
      - task: docker:build:trousseau
      - task: docker:run:proxy
      - task: docker:run:debug
      - task: docker:run:trousseau
      - ./bin/kubectl-kuttl test --config tests/e2e/kuttl/kube-v1.23/kuttl.yaml
  example:load:
    desc: load demo data
    cmds:
      - sh {{.SCRIPT}}/test.bash
  example:before-key-rotate:
    desc: data before key rotate
    cmds:
      - echo "-------- secret etcd data --------"
      -  ./bin/kubectl -n kube-system exec -t etcd-kms-vault-control-plane -- etcdctl --cacert=/etc/kubernetes/pki/etcd/ca.crt  --cert=/etc/kubernetes/pki/etcd/server.crt  --key=/etc/kubernetes/pki/etcd/server.key  get /registry/secrets/default/data-test
      -  echo "-------- secret fetch data --------"
      - ./bin/kubectl get secret data-test -o yaml
  example:after-key-rotate:
    desc: data after key rotate
    cmds:
      -  ./bin/kubectl apply -f scripts/secret2.yaml
      - echo "-------- old secret etcd --------"
      -  ./bin/kubectl -n kube-system exec -t etcd-kms-vault-control-plane -- etcdctl --cacert=/etc/kubernetes/pki/etcd/ca.crt  --cert=/etc/kubernetes/pki/etcd/server.crt  --key=/etc/kubernetes/pki/etcd/server.key  get /registry/secrets/default/data-test
      - echo "-------- new secret etcd --------"
      -  ./bin/kubectl -n kube-system exec -t etcd-kms-vault-control-plane -- etcdctl --cacert=/etc/kubernetes/pki/etcd/ca.crt  --cert=/etc/kubernetes/pki/etcd/server.crt  --key=/etc/kubernetes/pki/etcd/server.key  get /registry/secrets/default/data-test3
      -  echo "-------- old secret fetch data --------"
      - ./bin/kubectl get secret data-test -o yaml
      -  echo "-------- new secret fetch data --------"
      - ./bin/kubectl get secret data-test3 -o yaml
